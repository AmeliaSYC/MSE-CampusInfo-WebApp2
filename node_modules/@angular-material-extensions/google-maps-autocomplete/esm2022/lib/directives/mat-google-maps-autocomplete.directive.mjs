import { Directive, EventEmitter, forwardRef, HostListener, Inject, Input, Output, PLATFORM_ID, ViewChild } from '@angular/core';
import { NG_VALIDATORS, Validators } from '@angular/forms';
import { isPlatformBrowser } from '@angular/common';
import { ApiKeyToken } from "../tokens";
import * as i0 from "@angular/core";
import * as i1 from "../services/script-loader.service";
export class MatGoogleMapsAutocompleteDirective {
    platformId;
    apiKey;
    elemRef;
    cf;
    loaderService;
    ngZone;
    inputField;
    autocomplete;
    address;
    country;
    placeIdOnly;
    strictBounds;
    types;
    type;
    autoCompleteOptions = {};
    onChange = new EventEmitter();
    onAutocompleteSelected = new EventEmitter();
    onGermanAddressMapped = new EventEmitter();
    onLocationSelected = new EventEmitter();
    disabled;
    _value;
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.propagateChange(this.value);
        this.cf.markForCheck();
    }
    onNewPlaceResult = new EventEmitter();
    propagateChange = (_) => {
    };
    constructor(platformId, apiKey, elemRef, cf, loaderService, ngZone) {
        this.platformId = platformId;
        this.apiKey = apiKey;
        this.elemRef = elemRef;
        this.cf = cf;
        this.loaderService = loaderService;
        this.ngZone = ngZone;
    }
    ngOnDestroy() {
        if (this.autocomplete) {
            google.maps.event.clearInstanceListeners(this.autocomplete);
        }
    }
    ngAfterViewInit() {
        this.loadMap();
    }
    ngOnInit() {
    }
    validate(fc) {
        return fc.hasValidator(Validators.required) ? !!fc?.value : true;
    }
    onChangeInputValue() {
        const value = this.elemRef.nativeElement?.value;
        this.value = value;
    }
    initGoogleMapsAutocomplete() {
        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);
        autocomplete.addListener('place_changed', () => {
            this.ngZone.run(() => {
                // get the place result
                const place = autocomplete.getPlace();
                const germanAddress = {
                    gmID: place.id,
                    icon: place.icon,
                    url: place.url,
                    placeID: place.place_id,
                    displayAddress: place.formatted_address,
                    name: place.name,
                    vicinity: place.vicinity,
                    locality: {},
                    state: {},
                    country: {},
                    geoLocation: { latitude: -1, longitude: -1 },
                };
                if (place.geometry && place.geometry.location) {
                    germanAddress.geoLocation.latitude = place.geometry.location.lat();
                    germanAddress.geoLocation.longitude = place.geometry.location.lng();
                }
                place.address_components.forEach(value => {
                    if (value.types.indexOf('street_number') > -1) {
                        germanAddress.streetNumber = value.short_name;
                    }
                    if (value.types.indexOf('route') > -1) {
                        germanAddress.streetName = value.long_name;
                    }
                    if (value.types.indexOf('postal_code') > -1) {
                        germanAddress.postalCode = Number(value.short_name);
                    }
                    if (value.types.indexOf('sublocality') > -1) {
                        germanAddress.sublocality = value.long_name;
                    }
                    if (value.types.indexOf('locality') > -1) {
                        germanAddress.locality.long = value.long_name;
                        germanAddress.locality.short = value.short_name;
                    }
                    if (value.types.indexOf('administrative_area_level_1') > -1) {
                        germanAddress.state.long = value.long_name;
                        germanAddress.state.short = value.short_name;
                    }
                    if (value.types.indexOf('country') > -1) {
                        germanAddress.country.long = value.long_name;
                        germanAddress.country.short = value.short_name;
                    }
                    if (value.types.indexOf('administrative_area_level_3') > -1) {
                        germanAddress.locality.short = value.short_name;
                    }
                });
                this.onGermanAddressMapped.emit(germanAddress);
                this.value = place.formatted_address;
                this.address = place.formatted_address;
                this.onAutocompleteSelected.emit(place);
                this.onLocationSelected.emit({
                    latitude: place.geometry.location.lat(),
                    longitude: place.geometry.location.lng()
                });
            });
        });
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(obj) {
        if (obj) {
            this.value = obj;
        }
    }
    loadMap() {
        this.loaderService.loadScript(`https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`)
            .then(() => {
            this.initMap();
        })
            .catch(error => console.error('Google Maps loading failed: ', error));
    }
    initMap() {
        if (isPlatformBrowser(this.platformId)) {
            console.log("on after view init --> ", this.elemRef.nativeElement);
            this.autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement);
            const options = {
                // types: ['address'],
                // componentRestrictions: {country: this.country},
                placeIdOnly: this.placeIdOnly,
                strictBounds: this.strictBounds,
                // types: this.types,
                type: this.type
            };
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.componentRestrictions = { country: this.country } : null;
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.types = this.types : null;
            this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
            this.initGoogleMapsAutocomplete();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: MatGoogleMapsAutocompleteDirective, deps: [{ token: PLATFORM_ID }, { token: ApiKeyToken }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.ScriptLoaderService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.2", type: MatGoogleMapsAutocompleteDirective, selector: "[matGoogleMapsAutocomplete]", inputs: { address: "address", country: "country", placeIdOnly: "placeIdOnly", strictBounds: "strictBounds", types: "types", type: "type", autoCompleteOptions: "autoCompleteOptions", value: "value" }, outputs: { onChange: "onChange", onAutocompleteSelected: "onAutocompleteSelected", onGermanAddressMapped: "onGermanAddressMapped", onLocationSelected: "onLocationSelected" }, host: { listeners: { "change": "onChangeInputValue()" } }, providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),
                multi: true
            }
        ], viewQueries: [{ propertyName: "inputField", first: true, predicate: ["inputField"], descendants: true }], exportAs: ["matGoogleMapsAutocomplete"], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: MatGoogleMapsAutocompleteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[matGoogleMapsAutocomplete]',
                    exportAs: 'matGoogleMapsAutocomplete',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ApiKeyToken]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.ScriptLoaderService }, { type: i0.NgZone }]; }, propDecorators: { inputField: [{
                type: ViewChild,
                args: ['inputField']
            }], address: [{
                type: Input
            }], country: [{
                type: Input
            }], placeIdOnly: [{
                type: Input
            }], strictBounds: [{
                type: Input
            }], types: [{
                type: Input
            }], type: [{
                type: Input
            }], autoCompleteOptions: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onAutocompleteSelected: [{
                type: Output
            }], onGermanAddressMapped: [{
                type: Output
            }], onLocationSelected: [{
                type: Output
            }], value: [{
                type: Input
            }], onChangeInputValue: [{
                type: HostListener,
                args: ['change']
            }] } });
//# sourceMappingURL=data:application/json;base64,